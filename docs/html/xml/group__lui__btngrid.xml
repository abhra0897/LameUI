<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="group__lui__btngrid" kind="group">
    <compoundname>lui_btngrid</compoundname>
    <title>Buttongrid API</title>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__lui__btngrid_1ga60ea2e3e4af851bce7b4280a869438ba" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="lame__ui_8h_1a5a7ccb45f639e22e43b3ac176a75dd09" kindref="member">lui_obj_t</ref> *</type>
        <definition>lui_obj_t* lui_btngrid_create</definition>
        <argsstring>()</argsstring>
        <name>lui_btngrid_create</name>
        <briefdescription>
<para>Create a buttongrid with initial values. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>lui_obj_t* created buttongrid object </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lame_ui.h" line="1850" column="11" bodyfile="lame_ui.c" bodystart="2153" bodyend="2197" declfile="lame_ui.h" declline="1850" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__lui__btngrid_1gaa9a9febb315d359420be30fea2d9657d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void lui_btngrid_draw</definition>
        <argsstring>(lui_obj_t *obj)</argsstring>
        <name>lui_btngrid_draw</name>
        <param>
          <type><ref refid="lame__ui_8h_1a5a7ccb45f639e22e43b3ac176a75dd09" kindref="member">lui_obj_t</ref> *</type>
          <declname>obj</declname>
        </param>
        <briefdescription>
<para>Draw a buttongrid. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>obj</parametername>
</parameternamelist>
<parameterdescription>
<para>buttongrid object </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
<para>Draw a button only if the btngrid needs full render, or when a buttons index matches an active button&apos;s index</para>
<para>This is to handle when a checkable button lost its focus but check state is changed to &quot;Checked&quot;. Or, when manually the check state is set</para>
        </inbodydescription>
        <location file="lame_ui.h" line="1857" column="6" bodyfile="lame_ui.c" bodystart="2049" bodyend="2151" declfile="lame_ui.h" declline="1857" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__lui__btngrid_1ga03a8859464594c353885a559c5026328" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void lui_btngrid_set_textmap</definition>
        <argsstring>(lui_obj_t *obj, const char *texts[])</argsstring>
        <name>lui_btngrid_set_textmap</name>
        <param>
          <type><ref refid="lame__ui_8h_1a5a7ccb45f639e22e43b3ac176a75dd09" kindref="member">lui_obj_t</ref> *</type>
          <declname>obj</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>texts</declname>
          <array>[]</array>
        </param>
        <briefdescription>
<para>Set texts of all buttons as a map. The grid is created based on this text map. Each item in the array makes a column and <computeroutput>\n</computeroutput> (newline) cretaes a row. The text map&apos;s last item must be a <computeroutput>\0</computeroutput>. This marks the end of the grid. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>obj</parametername>
</parameternamelist>
<parameterdescription>
<para>buttongrid object </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>texts</parametername>
</parameternamelist>
<parameterdescription>
<para>array of strings to be used as text map. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lame_ui.h" line="1867" column="6" bodyfile="lame_ui.c" bodystart="2199" bodyend="2264" declfile="lame_ui.h" declline="1867" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__lui__btngrid_1gaf32f56d6e1fd0e6a59dc558a841d62ab" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void lui_btngrid_set_propertymap</definition>
        <argsstring>(lui_obj_t *obj, const uint8_t properties[])</argsstring>
        <name>lui_btngrid_set_propertymap</name>
        <param>
          <type><ref refid="lame__ui_8h_1a5a7ccb45f639e22e43b3ac176a75dd09" kindref="member">lui_obj_t</ref> *</type>
          <declname>obj</declname>
        </param>
        <param>
          <type>const uint8_t</type>
          <declname>properties</declname>
          <array>[]</array>
        </param>
        <briefdescription>
<para>Set properties of all buttons as a map. </para>
        </briefdescription>
        <detaileddescription>
<para>Each item in the array is a 8-bit value denoting various properties of a button of the buttongrid. The size of array must be same as the number of buttons in the button grid.The structure of a property byte is as follows:</para>
<para><table rows="6" cols="3"><row>
<entry thead="yes"><para>Bit </para>
</entry><entry thead="yes"><para>Meaning </para>
</entry><entry thead="yes"><para>Value  </para>
</entry></row>
<row>
<entry thead="no"><para>7 </para>
</entry><entry thead="no"><para>Is button checked? </para>
</entry><entry thead="no"><para>0: Unchecked, <linebreak/>
1: Checked  </para>
</entry></row>
<row>
<entry thead="no"><para>6 </para>
</entry><entry thead="no"><para>Is button disabled? </para>
</entry><entry thead="no"><para>0: NOT disabled (i.e., Enabled), <linebreak/>
1: Disabled  </para>
</entry></row>
<row>
<entry thead="no"><para>5 </para>
</entry><entry thead="no"><para>Is button hidden? </para>
</entry><entry thead="no"><para>0: NOT hidden (i.e., visible), <linebreak/>
1: Hidden  </para>
</entry></row>
<row>
<entry thead="no"><para>4 </para>
</entry><entry thead="no"><para>Is button checkable? </para>
</entry><entry thead="no"><para>0: NOT checkable, <linebreak/>
1: Checkable  </para>
</entry></row>
<row>
<entry thead="no"><para>3:0 </para>
</entry><entry thead="no"><para>Button width unit </para>
</entry><entry thead="no"><para>1-15, <linebreak/>
Setting it to 0 has no effect  </para>
</entry></row>
</table>
</para>
<para>Example: To make a checkable button with 3 unit width and to set it to <computeroutput>checked</computeroutput> status, property byte should be: (1 &lt;&lt; 7) | (1 &lt;&lt; 4) | 3</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>obj</parametername>
</parameternamelist>
<parameterdescription>
<para>buttongrid object </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>properties</parametername>
</parameternamelist>
<parameterdescription>
<para>array of property bytes </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lame_ui.h" line="1890" column="6" bodyfile="lame_ui.c" bodystart="2266" bodyend="2284" declfile="lame_ui.h" declline="1890" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__lui__btngrid_1ga0fba296e6cbf020c2a0cf02f8110c267" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void lui_btngrid_set_btn_property_bits</definition>
        <argsstring>(lui_obj_t *obj, uint16_t btn_index, uint8_t property_byte)</argsstring>
        <name>lui_btngrid_set_btn_property_bits</name>
        <param>
          <type><ref refid="lame__ui_8h_1a5a7ccb45f639e22e43b3ac176a75dd09" kindref="member">lui_obj_t</ref> *</type>
          <declname>obj</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>btn_index</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>property_byte</declname>
        </param>
        <briefdescription>
<para>Set property byte (8 bits) of a particular button in a buttongrid. </para>
        </briefdescription>
        <detaileddescription>
<para>Also see: <ref refid="group__lui__btngrid_1gaf32f56d6e1fd0e6a59dc558a841d62ab" kindref="member">lui_btngrid_set_propertymap()</ref></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>obj</parametername>
</parameternamelist>
<parameterdescription>
<para>buttongrid object </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>btn_index</parametername>
</parameternamelist>
<parameterdescription>
<para>index of the button whose property is being set </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>property_byte</parametername>
</parameternamelist>
<parameterdescription>
<para>8-bit property value </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lame_ui.h" line="1901" column="6" bodyfile="lame_ui.c" bodystart="2286" bodyend="2308" declfile="lame_ui.h" declline="1901" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__lui__btngrid_1ga3e4a375a7f7b62b5fdcb4b290210536a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void lui_btngrid_set_btn_text</definition>
        <argsstring>(lui_obj_t *obj, uint8_t btn_index, char *text)</argsstring>
        <name>lui_btngrid_set_btn_text</name>
        <param>
          <type><ref refid="lame__ui_8h_1a5a7ccb45f639e22e43b3ac176a75dd09" kindref="member">lui_obj_t</ref> *</type>
          <declname>obj</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>btn_index</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>text</declname>
        </param>
        <briefdescription>
<para>Set text of a particular button in a buttongrid. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>obj</parametername>
</parameternamelist>
<parameterdescription>
<para>buttongrid object </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>btn_index</parametername>
</parameternamelist>
<parameterdescription>
<para>index of the button whose text is being set </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>text</parametername>
</parameternamelist>
<parameterdescription>
<para>text of the button </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lame_ui.h" line="1910" column="6" bodyfile="lame_ui.c" bodystart="2310" bodyend="2333" declfile="lame_ui.h" declline="1910" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__lui__btngrid_1ga1f41ec66946669fa36ed66a97ce7a5f3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char* lui_btngrid_get_btn_text</definition>
        <argsstring>(lui_obj_t *obj, uint16_t btn_index)</argsstring>
        <name>lui_btngrid_get_btn_text</name>
        <param>
          <type><ref refid="lame__ui_8h_1a5a7ccb45f639e22e43b3ac176a75dd09" kindref="member">lui_obj_t</ref> *</type>
          <declname>obj</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>btn_index</declname>
        </param>
        <briefdescription>
<para>Get text of a particular button in a buttongrid. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>obj</parametername>
</parameternamelist>
<parameterdescription>
<para>buttongrid object </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>btn_index</parametername>
</parameternamelist>
<parameterdescription>
<para>index of the button </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>const char* text of the button </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lame_ui.h" line="1919" column="12" bodyfile="lame_ui.c" bodystart="2397" bodyend="2423" declfile="lame_ui.h" declline="1919" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="group__lui__btngrid_1gace7e8cc9fdbcc01271c7e50351d1e081" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void lui_btngrid_set_btn_width_unit</definition>
        <argsstring>(lui_obj_t *obj, uint16_t btn_index, uint8_t width_unit)</argsstring>
        <name>lui_btngrid_set_btn_width_unit</name>
        <param>
          <type><ref refid="lame__ui_8h_1a5a7ccb45f639e22e43b3ac176a75dd09" kindref="member">lui_obj_t</ref> *</type>
          <declname>obj</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>btn_index</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>width_unit</declname>
        </param>
        <briefdescription>
<para>Set the width unit of a particular button in a buttongrid. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>obj</parametername>
</parameternamelist>
<parameterdescription>
<para>buttongrid object </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>btn_index</parametername>
</parameternamelist>
<parameterdescription>
<para>index of the button whose width unit is being set </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>width_unit</parametername>
</parameternamelist>
<parameterdescription>
<para>width unit. Range is 1-15 </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lame_ui.h" line="1928" column="6" bodyfile="lame_ui.c" bodystart="2335" bodyend="2344" declfile="lame_ui.h" declline="1928" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__lui__btngrid_1gac59ba58a24ab4be01e1dbef21bbbab05" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void lui_btngrid_set_btn_hidden</definition>
        <argsstring>(lui_obj_t *obj, uint16_t btn_index, uint8_t hidden)</argsstring>
        <name>lui_btngrid_set_btn_hidden</name>
        <param>
          <type><ref refid="lame__ui_8h_1a5a7ccb45f639e22e43b3ac176a75dd09" kindref="member">lui_obj_t</ref> *</type>
          <declname>obj</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>btn_index</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>hidden</declname>
        </param>
        <briefdescription>
<para>Hide/unhide a particular button in the buttongrid. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>obj</parametername>
</parameternamelist>
<parameterdescription>
<para>buttongrid object </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>btn_index</parametername>
</parameternamelist>
<parameterdescription>
<para>index of the button </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>hidden</parametername>
</parameternamelist>
<parameterdescription>
<para>0: Visible, 1: Hidden </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lame_ui.h" line="1937" column="6" bodyfile="lame_ui.c" bodystart="2346" bodyend="2356" declfile="lame_ui.h" declline="1937" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__lui__btngrid_1gad433de542a9d897225abd72d22d7e2a4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void lui_btngrid_set_btn_checkable</definition>
        <argsstring>(lui_obj_t *obj, uint16_t btn_index, uint8_t checkable)</argsstring>
        <name>lui_btngrid_set_btn_checkable</name>
        <param>
          <type><ref refid="lame__ui_8h_1a5a7ccb45f639e22e43b3ac176a75dd09" kindref="member">lui_obj_t</ref> *</type>
          <declname>obj</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>btn_index</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>checkable</declname>
        </param>
        <briefdescription>
<para>Set if a particular button is checkable or not. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>obj</parametername>
</parameternamelist>
<parameterdescription>
<para>buttongrid object </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>btn_index</parametername>
</parameternamelist>
<parameterdescription>
<para>index of the button </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>checkable</parametername>
</parameternamelist>
<parameterdescription>
<para>0: NOT checkable, 1: Checkable </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lame_ui.h" line="1946" column="6" bodyfile="lame_ui.c" bodystart="2358" bodyend="2372" declfile="lame_ui.h" declline="1946" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__lui__btngrid_1ga55e7742bb16fb8dedfdb0bd724164bfb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void lui_btngrid_set_btn_checked</definition>
        <argsstring>(lui_obj_t *obj, uint16_t btn_index, uint8_t checked)</argsstring>
        <name>lui_btngrid_set_btn_checked</name>
        <param>
          <type><ref refid="lame__ui_8h_1a5a7ccb45f639e22e43b3ac176a75dd09" kindref="member">lui_obj_t</ref> *</type>
          <declname>obj</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>btn_index</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>checked</declname>
        </param>
        <briefdescription>
<para>Set the check status of a particular button in button grid. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>obj</parametername>
</parameternamelist>
<parameterdescription>
<para>buttongrid object </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>btn_index</parametername>
</parameternamelist>
<parameterdescription>
<para>index of the button </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>checked</parametername>
</parameternamelist>
<parameterdescription>
<para>0: NOT checked, 1: Checked </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lame_ui.h" line="1955" column="6" bodyfile="lame_ui.c" bodystart="2374" bodyend="2384" declfile="lame_ui.h" declline="1955" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__lui__btngrid_1ga04c8b09e20441143fc39405e2e42cc37" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int16_t</type>
        <definition>int16_t lui_btngrid_get_acive_btn_index</definition>
        <argsstring>(lui_obj_t *obj)</argsstring>
        <name>lui_btngrid_get_acive_btn_index</name>
        <param>
          <type><ref refid="lame__ui_8h_1a5a7ccb45f639e22e43b3ac176a75dd09" kindref="member">lui_obj_t</ref> *</type>
          <declname>obj</declname>
        </param>
        <briefdescription>
<para>Get the index of currently active button, i.e., the button which has the input. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>obj</parametername>
</parameternamelist>
<parameterdescription>
<para>buttongrid object </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>int16_t Index of active button. -1 if error. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lame_ui.h" line="1964" column="9" bodyfile="lame_ui.c" bodystart="2386" bodyend="2395" declfile="lame_ui.h" declline="1964" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="group__lui__btngrid_1gae1f8d50cc22f4c1523a82dd6f16e51b1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int8_t</type>
        <definition>int8_t lui_btngrid_get_btn_check_status</definition>
        <argsstring>(lui_obj_t *obj, uint8_t btn_index)</argsstring>
        <name>lui_btngrid_get_btn_check_status</name>
        <param>
          <type><ref refid="lame__ui_8h_1a5a7ccb45f639e22e43b3ac176a75dd09" kindref="member">lui_obj_t</ref> *</type>
          <declname>obj</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>btn_index</declname>
        </param>
        <briefdescription>
<para>Get the check status of a particular button in button grid. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>obj</parametername>
</parameternamelist>
<parameterdescription>
<para>buttongrid object </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>btn_index</parametername>
</parameternamelist>
<parameterdescription>
<para>index of the button </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>int8_t Check status. 0: NOT checked, 1: Checked, -1: Error </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lame_ui.h" line="1973" column="8" bodyfile="lame_ui.c" bodystart="2425" bodyend="2435" declfile="lame_ui.h" declline="1973" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="group__lui__btngrid_1ga883d946697aaa0b49c7e30d223445af1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void lui_btngrid_set_font</definition>
        <argsstring>(lui_obj_t *obj, const lui_font_t *font)</argsstring>
        <name>lui_btngrid_set_font</name>
        <param>
          <type><ref refid="lame__ui_8h_1a5a7ccb45f639e22e43b3ac176a75dd09" kindref="member">lui_obj_t</ref> *</type>
          <declname>obj</declname>
        </param>
        <param>
          <type>const <ref refid="structlui__font__t" kindref="compound">lui_font_t</ref> *</type>
          <declname>font</declname>
        </param>
        <briefdescription>
<para>Set font of button grid text. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>obj</parametername>
</parameternamelist>
<parameterdescription>
<para>buttongrid object </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>font</parametername>
</parameternamelist>
<parameterdescription>
<para>font object </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lame_ui.h" line="1981" column="6" bodyfile="lame_ui.c" bodystart="2437" bodyend="2451" declfile="lame_ui.h" declline="1981" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__lui__btngrid_1gaf362196a280469cb9a95bdae11650495" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void lui_btngrid_set_extra_colors</definition>
        <argsstring>(lui_obj_t *obj, uint16_t btn_color, uint16_t label_color, uint16_t btn_pressed_color)</argsstring>
        <name>lui_btngrid_set_extra_colors</name>
        <param>
          <type><ref refid="lame__ui_8h_1a5a7ccb45f639e22e43b3ac176a75dd09" kindref="member">lui_obj_t</ref> *</type>
          <declname>obj</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>btn_color</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>label_color</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>btn_pressed_color</declname>
        </param>
        <briefdescription>
<para>Set extra colors of button grid. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>obj</parametername>
</parameternamelist>
<parameterdescription>
<para>buttongrid object </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>btn_color</parametername>
</parameternamelist>
<parameterdescription>
<para>16-bit color of button </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>label_color</parametername>
</parameternamelist>
<parameterdescription>
<para>16-bit color of button texts </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>btn_pressed_color</parametername>
</parameternamelist>
<parameterdescription>
<para>16-bit color of pressed buttons </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lame_ui.h" line="1991" column="6" bodyfile="lame_ui.c" bodystart="2453" bodyend="2472" declfile="lame_ui.h" declline="1991" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__lui__btngrid_1ga6b21900d39d7da89840cf43dae7d8d39" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void lui_btngrid_set_btn_margin</definition>
        <argsstring>(lui_obj_t *obj, uint8_t margin_x, uint16_t margin_y)</argsstring>
        <name>lui_btngrid_set_btn_margin</name>
        <param>
          <type><ref refid="lame__ui_8h_1a5a7ccb45f639e22e43b3ac176a75dd09" kindref="member">lui_obj_t</ref> *</type>
          <declname>obj</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>margin_x</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>margin_y</declname>
        </param>
        <briefdescription>
<para>Set margin of buttons in a button grid. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>obj</parametername>
</parameternamelist>
<parameterdescription>
<para>buttongrid object </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>margin_x</parametername>
</parameternamelist>
<parameterdescription>
<para>margin in X axis </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>margin_y</parametername>
</parameternamelist>
<parameterdescription>
<para>margin in Y axis </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lame_ui.h" line="2000" column="6" bodyfile="lame_ui.c" bodystart="2474" bodyend="2494" declfile="lame_ui.h" declline="2000" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__lui__btngrid_1ga6bc7ed4b99549aca88111b9d11531058" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void _lui_btngrid_calc_btn_area</definition>
        <argsstring>(lui_obj_t *obj)</argsstring>
        <name>_lui_btngrid_calc_btn_area</name>
        <param>
          <type><ref refid="lame__ui_8h_1a5a7ccb45f639e22e43b3ac176a75dd09" kindref="member">lui_obj_t</ref> *</type>
          <declname>obj</declname>
        </param>
        <briefdescription>
<para>Calculate buttongrid area. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>obj</parametername>
</parameternamelist>
<parameterdescription>
<para>buttongrid object </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lame_ui.h" line="2008" column="6" bodyfile="lame_ui.c" bodystart="2496" bodyend="2549" declfile="lame_ui.h" declline="2008" declcolumn="6"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>API for <bold><computeroutput>buttongrid</computeroutput></bold> widget. </para>
    </briefdescription>
    <detaileddescription>
<para><computeroutput>buttongrid</computeroutput> is a grid of buttons. It&apos;s way more effcient than adding individual button objects to forma grid/matrix. For example, if we need 20 buttons in a 5x4 grid, creating 20 individual button objects will take lots of RAM. Rather using a 5x4 buttongrid will only create a single object and saves RAM significantly.</para>
<para>Practical examples of buttongrid are qwerty keyboards, numpads etc..</para>
<sect1 id="group__lui__btngrid_1buttongrid_example1">
<title>Example 1</title>
<para>Let&apos;s create a simple numpad using buttongrid. <programlisting><codeline><highlight class="normal">lui_obj_t*<sp/>numpad<sp/>=<sp/>lui_btngrid_create();</highlight></codeline>
<codeline><highlight class="normal">//<sp/>Setting<sp/>buttongrid<sp/>area<sp/>is<sp/>important.<sp/>Else<sp/>items<sp/>won&apos;t<sp/>be<sp/>properly<sp/>rendered</highlight></codeline>
<codeline><highlight class="normal">lui_object_set_area(numpad,<sp/>200,<sp/>200);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Text<sp/>map<sp/>of<sp/>the<sp/>numpad</highlight></codeline>
<codeline><highlight class="normal">const<sp/>char*<sp/>numpad_txt_map[]<sp/>=</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>&quot;7&quot;,<sp/>&quot;8&quot;,<sp/>&quot;9&quot;,<sp/>&quot;\n&quot;,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>&quot;4&quot;,<sp/>&quot;5&quot;,<sp/>&quot;6&quot;,<sp/>&quot;\n&quot;,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>&quot;1&quot;,<sp/>&quot;2&quot;,<sp/>&quot;3&quot;,<sp/>&quot;\n&quot;,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>&quot;0&quot;,<sp/>&quot;00&quot;,<sp/>&quot;.&quot;,<sp/>&quot;\n&quot;,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>&quot;+&quot;,<sp/>&quot;-&quot;,<sp/>&quot;=&quot;,<sp/>&quot;\0&quot;</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Property<sp/>map.<sp/>Notice<sp/>how<sp/>the<sp/>&quot;=&quot;<sp/>button<sp/>has<sp/>twice<sp/>the<sp/>width<sp/>of<sp/>&quot;+&quot;<sp/>and<sp/>&quot;-&quot;.</highlight></codeline>
<codeline><highlight class="normal">const<sp/>uint8_t<sp/>numpad_property_map[]<sp/>=</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>1,<sp/>1,<sp/>1,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>1,<sp/>1,<sp/>1,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>1,<sp/>1,<sp/>1,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>1,<sp/>1,<sp/>1,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>1,<sp/>1,<sp/>2</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">lui_btngrid_set_textmap(numpad,<sp/>numpad_txt_map);</highlight></codeline>
<codeline><highlight class="normal">lui_btngrid_set_propertymap(numpad,<sp/>numpad_property_map);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">lui_btngrid_set_btn_margin(numpad,<sp/>5,<sp/>5);</highlight></codeline>
</programlisting></para>
</sect1>
<sect1 id="group__lui__btngrid_1buttongrid_example2">
<title>Example 2</title>
<para>Let&apos;s create a simple control panel and use most of the features of buttongrid. Also we&apos;ll see how to use callback for buttongrid. <programlisting><codeline><highlight class="normal">void<sp/>controlpanel_callback(lui_obj_t*<sp/>ctrlpanel_btngrid)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Get<sp/>index<sp/>of<sp/>the<sp/>pressed<sp/>button</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>int<sp/>active_btn_index<sp/>=<sp/>lui_btngrid_get_acive_btn_index(ctrlpanel_btngrid);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(active_btn_index<sp/>==<sp/>-1)<sp/>return;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Get<sp/>text<sp/>of<sp/>the<sp/>button</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>const<sp/>char*<sp/>btn_txt<sp/>=<sp/>lui_btngrid_get_btn_text(ctrlpanel_btngrid,<sp/>active_btn_index);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(txt<sp/>==<sp/>NULL)<sp/><sp/><sp/><sp/>return;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>We<sp/>can<sp/>check<sp/>which<sp/>button<sp/>is<sp/>pressed<sp/>either<sp/>by<sp/>its<sp/>index<sp/>or<sp/>by<sp/>its<sp/>text.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>In<sp/>this<sp/>example<sp/>we&apos;ll<sp/>use<sp/>text<sp/>of<sp/>the<sp/>button.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(strcmp(txt,<sp/>&quot;Motor<sp/>1&quot;)<sp/>==<sp/>0)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Do<sp/>something<sp/>with<sp/>motor<sp/>1</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>else<sp/>if<sp/>(strcmp(txt,<sp/>&quot;Fan<sp/>1&quot;)<sp/>==<sp/>0)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Do<sp/>something<sp/>with<sp/>fan<sp/>1</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>else<sp/>if<sp/>(strcmp(txt,<sp/>&quot;Clr<sp/>T1&quot;)<sp/>==<sp/>0)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>This<sp/>button<sp/>is<sp/>checkable.<sp/>So,<sp/>get<sp/>its<sp/>check<sp/>status.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int8_t<sp/>clr_T1_status<sp/>=<sp/>lui_btngrid_get_btn_check_status(ctrlpanel_btngrid,<sp/>active_btn_index);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(clr_T1_status<sp/>==<sp/>1)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Checked,<sp/>do<sp/>something</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>else<sp/>if<sp/>(clr_T1_status<sp/>==<sp/>0)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Unchecked,<sp/>do<sp/>something<sp/>else</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>else</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Error,<sp/>return</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//...<sp/>Check<sp/>other<sp/>buttons<sp/>too<sp/>....</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">lui_obj_t*<sp/>controlpanel<sp/>=<sp/>lui_btngrid_create();</highlight></codeline>
<codeline><highlight class="normal">//<sp/>Setting<sp/>buttongrid<sp/>area<sp/>is<sp/>important.<sp/>Else<sp/>items<sp/>won&apos;t<sp/>be<sp/>properly<sp/>rendered</highlight></codeline>
<codeline><highlight class="normal">lui_object_set_area(controlpanel,<sp/>300,<sp/>200);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Text<sp/>map<sp/>of<sp/>the<sp/>controlpanel</highlight></codeline>
<codeline><highlight class="normal">const<sp/>char*<sp/>controlpanel_txt_map[]<sp/>=</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>&quot;Motor<sp/>1&quot;,<sp/>&quot;Fan<sp/>1&quot;,<sp/>&quot;Heater<sp/>L1&quot;,<sp/>&quot;Heater<sp/>L2&quot;<sp/>&quot;\n&quot;,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>&quot;Clr<sp/>T1&quot;,<sp/>&quot;Clr<sp/>T2&quot;,&quot;Ring<sp/>A&quot;,<sp/>&quot;Ring<sp/>B&quot;,<sp/>&quot;\n&quot;,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>&quot;X&quot;,<sp/>&quot;Y&quot;,<sp/>&quot;Z&quot;,<sp/>&quot;Stop&quot;,<sp/>&quot;\n&quot;,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>&quot;-&quot;,<sp/>&quot;+&quot;,<sp/>&quot;\0&quot;</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Property<sp/>map.<sp/>2<sp/>buttons<sp/>are<sp/>set<sp/>checkable<sp/>and<sp/>1<sp/>button<sp/>is<sp/>disabled</highlight></codeline>
<codeline><highlight class="normal">const<sp/>uint8_t<sp/>controlpanel_property_map[]<sp/>=</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>1,<sp/>1,<sp/>1,<sp/>1,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>1|LUI_BTNGRID_MASK_BTN_CHECKABLE,<sp/>1|LUI_BTNGRID_MASK_BTN_CHECKABLE,<sp/>1,<sp/>1,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>1,<sp/>1,<sp/>1,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>1,<sp/>1,<sp/>1,<sp/>3|LUI_BTNGRID_MASK_BTN_DISABLED,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>1,<sp/>1,<sp/>2</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">lui_btngrid_set_textmap(controlpanel,<sp/>controlpanel_txt_map);</highlight></codeline>
<codeline><highlight class="normal">lui_btngrid_set_propertymap(controlpanel,controlpanel_property_map);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">lui_btngrid_set_btn_margin(controlpanel,<sp/>2,<sp/>5);</highlight></codeline>
<codeline><highlight class="normal">lui_object_set_callback(controlpanel,<sp/>controlpanel_callback);</highlight></codeline>
</programlisting> </para>
</sect1>
    </detaileddescription>
  </compounddef>
</doxygen>
