<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="indexpage" kind="page">
    <compoundname>index</compoundname>
    <title>LameUI Documentaion</title>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para><image type="html" name="logo_dark_small.png" inline="yes"></image>
</para>
<sect1 id="index_1autotoc_md1">
<title>What?</title>
<para>LameUI is a super simple, platform independent UI library with lots and lots of limitations, designed for embedded systems with low resources. Though its under active development and I&apos;m trying to remove those limitations. Even though I tried my best to keep it light weight, it became heavier than I wanted it to be.</para>
</sect1>
<sect1 id="index_1autotoc_md2">
<title>Why?</title>
<para>Main reason - to challenge my skills and learn new things. I also happened to need a bare-minimum UI library for my own project which I abandoned as I started to make this one instead. It was started as a lockdown project and soon enough I abandoned it in an incomplete state as I lost interest. After 4 months I came back to it with a goal to at least make it work once. Future of this project is uncertain, but as long as it feels challenging, I&apos;ll keep adding/fixing stuffs.</para>
</sect1>
<sect1 id="index_1autotoc_md3">
<title>Display Output</title>
<para>Drawing to display is done by call back functions provided by the user.</para>
<para><programlisting filename=".C"><codeline><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>lui_dispdrv_set_draw_pixels_area_cb(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>(*draw_pixels_area_cb)(uint16_t<sp/>x,<sp/>uint16_t<sp/>y,<sp/>uint16_t<sp/>w,<sp/>uint16_t<sp/>h,<sp/>uint16_t<sp/>color),<sp/><ref refid="struct__lui__disp__drv__s" kindref="compound">lui_dispdrv_t</ref><sp/>*dispdrv);</highlight></codeline>
</programlisting></para>
<para>LameUI has no buffer of its own. Because it&apos;s mainly targetted towards MCUs with low RAM. As a result, user need to manage buffering if they need to. Sometimes buffering, and then flush the entire buffer is faster than writing individual pixels each time</para>
<para>That&apos;s why LameUI calls <computeroutput>void (*render_complete_cb)();</computeroutput> when rendering is complete, given that user provided the callback function. In that callback function, user should flush the buffer. For setting the callback function, this function is used:</para>
<para><programlisting filename=".C"><codeline><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>lui_dispdrv_set_render_complete_cb(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>(*render_complete_cb)(),<sp/><ref refid="struct__lui__disp__drv__s" kindref="compound">lui_dispdrv_t</ref><sp/>*dispdrv)</highlight></codeline>
</programlisting></para>
<para>Note: Commonly available lcd displays that we use with microcontrollers have built-in GRAM, hence, the <computeroutput>render_complete_cb()</computeroutput> is not mandatory for them.</para>
</sect1>
<sect1 id="index_1autotoc_md4">
<title>Read Inputs</title>
<para>LameUI now only supports touch input. Support for D-Pad / Rotary encoder is in my mind, but that&apos;s not the priority for now.</para>
<para><programlisting filename=".C"><codeline><highlight class="normal">1.<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>lui_touch_inputdev_set_read_input_cb(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>(*read_touch_input_cb)(tLuiTouchInputData<sp/>*inputdata),<sp/>tLuiTouchInputDev<sp/>*inputdev);</highlight></codeline>
</programlisting> </para>
</sect1>
    </detaileddescription>
  </compounddef>
</doxygen>
