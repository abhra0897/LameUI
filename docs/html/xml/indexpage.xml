<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="indexpage" kind="page">
    <compoundname>index</compoundname>
    <title>LameUI Documentaion</title>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para><image type="html" name="logo_dark_small.png" inline="yes"></image>
</para>
<sect2 id="index_1autotoc_md1">
<title>What?</title>
<para>LameUI is a super simple, platform independent UI library with lots of limitations, designed for embedded systems with low resources. It&apos;s under active development and I&apos;m trying to add more features. Two important goals of LameUI are:<itemizedlist>
<listitem><para>Be lightweight</para>
</listitem><listitem><para>Use minimum number of files</para>
</listitem></itemizedlist>
</para>
</sect2>
<sect2 id="index_1autotoc_md2">
<title>Why?</title>
<para>Main reason - to challenge my skills and learn new things. It was started as a lockdown project and soon enough I abandoned it in an incomplete state as I lost interest. After 4 months I came back to it with a goal to at least make it work once. Future of this project is uncertain, but as long as it feels challenging, I&apos;ll keep adding/fixing stuffs.</para>
</sect2>
<sect2 id="index_1autotoc_md3">
<title>Who?</title>
<para><bold>Who will use it?</bold> <linebreak/>
 Probably no one. Unless you need a very simple and very lightweight UI library.</para>
<para><bold>Who is/are developing it?</bold> <linebreak/>
 I, alone.</para>
</sect2>
<sect1 id="index_1autotoc_md4">
<title>UI Elements</title>
<para>Following UI elements are implemented so far:</para>
<para><orderedlist>
<listitem><para>Label</para>
</listitem><listitem><para>Line chart</para>
</listitem><listitem><para>Button</para>
</listitem><listitem><para>Switch</para>
</listitem><listitem><para>Checkbox</para>
</listitem><listitem><para>Slider</para>
</listitem><listitem><para>List</para>
</listitem><listitem><para>Button grid</para>
</listitem><listitem><para>Keyboard</para>
</listitem><listitem><para>Textbox</para>
</listitem><listitem><para>Panel</para>
</listitem></orderedlist>
</para>
</sect1>
<sect1 id="index_1autotoc_md5">
<title>Usage</title>
<para>LameUI needs 3 callback functions from user to draw on display and read inputs. <linebreak/>
</para>
<para><orderedlist>
<listitem><para><computeroutput>draw_pixels_area_cb</computeroutput> to <emphasis>Display Output</emphasis>. (<bold>Mandatory</bold>)</para>
</listitem><listitem><para><computeroutput>render_complete_cb</computeroutput> to <emphasis>Display Output</emphasis>. (<bold>Optional</bold>)</para>
</listitem><listitem><para><computeroutput>read_touch_input_cb</computeroutput> to <emphasis>Read Inputs</emphasis>. (<bold>Optional</bold>)</para>
</listitem></orderedlist>
</para>
<sect2 id="index_1autotoc_md6">
<title>Display Output</title>
<para><bold>1. <computeroutput>draw_pixels_area_cb</computeroutput></bold> <linebreak/>
 Drawing to display is done by callback functions provided by the user.</para>
<para><programlisting filename=".C"><codeline><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__lui__dispdrv_1ga982617c7a5f3d018a3bab0e01eebf8e3" kindref="member">lui_dispdrv_set_draw_pixels_area_cb</ref>(<ref refid="struct__lui__disp__drv__s" kindref="compound">lui_dispdrv_t</ref>*<sp/>dispdrv,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>(*draw_pixels_area_cb)(uint16_t<sp/>x,<sp/>uint16_t<sp/>y,<sp/>uint16_t<sp/>w,<sp/>uint16_t<sp/>h,<sp/>uint16_t<sp/>color));</highlight></codeline>
</programlisting></para>
<para><bold>2. <computeroutput>render_complete_cb</computeroutput></bold> <linebreak/>
 LameUI has no frame buffer of its own. Because it&apos;s mainly targetted towards MCUs with low RAM. As a result, user need to manage buffering if they need to. Sometimes buffering, and then flushing the entire buffer is faster than writing individual pixels each time. <linebreak/>
</para>
<para>That&apos;s why LameUI calls <computeroutput>void (*render_complete_cb)();</computeroutput> when rendering is complete, given that user provided the callback function. In that callback function, user should flush the buffer. This is useful when user is buffering the draw calls. <linebreak/>
</para>
<para>For setting the callback function, this function is used:</para>
<para><programlisting filename=".C"><codeline><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__lui__dispdrv_1gaa2cf5623fa26babf738af3a2ef0a5fc4" kindref="member">lui_dispdrv_set_render_complete_cb</ref>(<ref refid="struct__lui__disp__drv__s" kindref="compound">lui_dispdrv_t</ref>*<sp/>dispdrv,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>(*render_complete_cb)());</highlight></codeline>
</programlisting></para>
<para>Note: Commonly available lcd displays that we use with microcontrollers have built-in GRAM, hence, the <computeroutput>render_complete_cb()</computeroutput> is not mandatory for them.</para>
</sect2>
<sect2 id="index_1autotoc_md7">
<title>Read Inputs</title>
<para><bold>3. <computeroutput>read_touch_input_cb</computeroutput></bold> <linebreak/>
</para>
<para>LameUI now only supports touch input. Support for D-Pad / Rotary encoder is in my mind, but that&apos;s not the priority for now.</para>
<para><programlisting filename=".C"><codeline><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__lui__input_1ga72d86e81f1d818b174b5a97b1297d840" kindref="member">lui_touch_inputdev_set_read_input_cb</ref>(<ref refid="struct__lui__touch__input__dev__s" kindref="compound">lui_touch_input_dev_t</ref>*<sp/>touch_inputdev,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>(*read_touch_input_cb)(<ref refid="struct__lui__touch__input__data__s" kindref="compound">lui_touch_input_data_t</ref>*<sp/>touch_inputdata));</highlight></codeline>
</programlisting></para>
</sect2>
</sect1>
<sect1 id="index_1autotoc_md8">
<title>Quick Start</title>
<para><bold>[ Part 1 ]</bold></para>
<para>This is a very simple example using TFT_eSPI library on Arduino framework. In this example we will only see how to register a display driver and a touch input device. No UI widgets are added here. For a detailed example, see next part.</para>
<para><programlisting filename=".C"><codeline><highlight class="comment">//<sp/>This<sp/>example<sp/>uses<sp/>TFT_eSPI<sp/>library<sp/>on<sp/>Arduino<sp/>framework</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Hardware:<sp/>[MCU<sp/>=<sp/>ESP32,<sp/>Display:<sp/>ILI9341,<sp/>Touch<sp/>IC<sp/>=<sp/>XPT2046]</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;TFT_eSPI.h&gt;</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/>Graphics<sp/>and<sp/>font<sp/>library<sp/>for<sp/>ILI9341<sp/>driver<sp/>chip</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;SPI.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>...<sp/>[<sp/>Include<sp/>LameUI<sp/>library<sp/>and<sp/>other<sp/>required<sp/>headers<sp/>too]<sp/>...</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">TFT_eSPI<sp/>tft<sp/>=<sp/>TFT_eSPI();<sp/><sp/></highlight><highlight class="comment">//<sp/>Invoke<sp/>library</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">uint8_t<sp/>lui_memory[4000];</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>draw_pixels_area_cb(uint16_t<sp/>x,<sp/>uint16_t<sp/>y,<sp/>uint16_t<sp/>w,<sp/>uint16_t<sp/>h,<sp/>uint16_t<sp/>color)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>tft.fillRect(x,<sp/>y,<sp/>w,<sp/>h,<sp/>color);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>read_touch_input_cb(<ref refid="struct__lui__touch__input__data__s" kindref="compound">lui_touch_input_data_t</ref>*<sp/>inputdata)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>uint16_t<sp/>x<sp/>=<sp/>0,<sp/>y<sp/>=<sp/>0;<sp/></highlight><highlight class="comment">//<sp/>To<sp/>store<sp/>the<sp/>touch<sp/>coordinates</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Pressed<sp/>will<sp/>be<sp/>set<sp/>true<sp/>is<sp/>there<sp/>is<sp/>a<sp/>valid<sp/>touch<sp/>on<sp/>the<sp/>screen</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>pressed<sp/>=<sp/>tft.getTouch(&amp;x,<sp/>&amp;y);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>inputdata-&gt;<ref refid="struct__lui__touch__input__data__s_1afb1054eabf8033209df3b6bc2ca5a2af" kindref="member">is_pressed</ref><sp/>=<sp/>pressed;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pressed)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>inputdata-&gt;<ref refid="struct__lui__touch__input__data__s_1a7f21ada3a9a2b790c51c2f767ea3e30e" kindref="member">x</ref><sp/>=<sp/>x;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>inputdata-&gt;<ref refid="struct__lui__touch__input__data__s_1a0dda12587fe70222aa328760a1ab2055" kindref="member">y</ref><sp/>=<sp/>y;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>inputdata-&gt;<ref refid="struct__lui__touch__input__data__s_1a7f21ada3a9a2b790c51c2f767ea3e30e" kindref="member">x</ref><sp/>=<sp/>-1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>inputdata-&gt;<ref refid="struct__lui__touch__input__data__s_1a0dda12587fe70222aa328760a1ab2055" kindref="member">y</ref><sp/>=<sp/>-1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>setup(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/></highlight></codeline>
<codeline><highlight class="normal">{<sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Initilaize<sp/>tft</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>tft.init();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>tft.setTouch(touch_cal_data);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Initialize<sp/>LameUI<sp/>with<sp/>some<sp/>memory</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__lui__core_1ga96ff45bfbaf38c57a613f1b4a4830893" kindref="member">lui_init</ref>(lui_memory,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(lui_memory));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>a<sp/>display<sp/>driver<sp/>object</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct__lui__disp__drv__s" kindref="compound">lui_dispdrv_t</ref>*<sp/>display_driver<sp/>=<sp/><ref refid="group__lui__dispdrv_1ga1d63878ad3c05200478a7f7b958faa19" kindref="member">lui_dispdrv_create</ref>();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__lui__dispdrv_1ga77ef8325d1acf4c014be20de214e80de" kindref="member">lui_dispdrv_register</ref>(display_driver);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__lui__dispdrv_1ga3516bb99ba95160e9673ba8541ffb13e" kindref="member">lui_dispdrv_set_resolution</ref>(display_driver,<sp/>240,<sp/>320);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__lui__dispdrv_1ga982617c7a5f3d018a3bab0e01eebf8e3" kindref="member">lui_dispdrv_set_draw_pixels_area_cb</ref>(display_driver,<sp/>draw_pixels_area_cb);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__lui__dispdrv_1gaa2cf5623fa26babf738af3a2ef0a5fc4" kindref="member">lui_dispdrv_set_render_complete_cb</ref>(display_driver,<sp/>NULL);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>touch<sp/>input<sp/>device</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct__lui__touch__input__dev__s" kindref="compound">lui_touch_input_dev_t</ref>*<sp/>input_device<sp/>=<sp/><ref refid="group__lui__input_1ga8a1f1c1a9f6d45e11ac7176cdf4873fd" kindref="member">lui_touch_inputdev_create</ref>();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__lui__input_1ga3861ea1c2fa9e1776f1aff61dc52daa9" kindref="member">lui_touch_inputdev_register</ref>(input_device);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__lui__input_1ga72d86e81f1d818b174b5a97b1297d840" kindref="member">lui_touch_inputdev_set_read_input_cb</ref>(input_device,<sp/>read_touch_input_cb);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>...<sp/>[Add<sp/>scene<sp/>(mandatory)<sp/>and<sp/>other<sp/>widgets]<sp/>...</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>loop()</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Must<sp/>update<sp/>the<sp/>UI<sp/>periodically</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__lui__core_1gaa4a3c7694929ad0b6c5cd565dd6e7304" kindref="member">lui_update</ref>();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>...<sp/>[Do<sp/>other<sp/>stuffs]<sp/>...</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para><bold>[ Part 2 ]</bold></para>
<para>This is a more detailed LameUI example code. It looks big, but that&apos;s only because multiple ways of handling draw calls are shown here. Implementation of <computeroutput>my_draw_pixels_cb()</computeroutput> function can be simplified as per user&apos;s need. Also, <computeroutput>my_render_cmplt_cb()</computeroutput> is optional and can be omitted if not needed. The example code itself is pretty simple and well commented.</para>
<para><programlisting filename=".C"><codeline><highlight class="preprocessor">#include&lt;stdio.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="lame__ui_8h" kindref="compound">LameUI/lame_ui.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//...<sp/>other<sp/>required<sp/>includes<sp/>....</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>HOR_RES<sp/><sp/><sp/><sp/>320</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>VERT_RES<sp/><sp/><sp/>240</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>[Mandatory]<sp/>LameUI<sp/>memory.<sp/>Here<sp/>we<sp/>are<sp/>giving<sp/>it<sp/>2KB<sp/>to<sp/>work<sp/>with.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">uint8_t<sp/>lameui_memory[2000];</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>[Optional]<sp/>LameUI<sp/>does<sp/>NOT<sp/>use<sp/>display<sp/>buffer.<sp/>This<sp/>is<sp/>used<sp/>only<sp/>if<sp/>user<sp/>wants<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>to<sp/>buffer<sp/>on<sp/>their<sp/>own.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Uncomment<sp/>below<sp/>line<sp/>to<sp/>enable<sp/>display<sp/>buffering.<sp/>Buffering<sp/>is<sp/>handled<sp/>by<sp/>user<sp/>and<sp/>NOT<sp/>by<sp/>LameUI.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//#define<sp/>USE_BUFFERING</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>USE_BUFERING</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>DISPLAY_BUFF_SIZE<sp/><sp/><sp/><sp/>(HOR_RES<sp/>*<sp/>VERT_RES)<sp/><sp/><sp/>//<sp/>Only<sp/>full<sp/>screen<sp/>buffer<sp/>is<sp/>possible<sp/>(no<sp/>partial<sp/>buffer)</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>uint16_t<sp/>display_buffer[DISPLAY_BUFF_SIZE];</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>display_buff_counter<sp/>=<sp/>0;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//-----------<sp/>callback<sp/>function<sp/>prototypes<sp/>------------</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>my_draw_pixels_cb<sp/>(uint16_t<sp/>x,<sp/>uint16_t<sp/>y,<sp/>uint16_t<sp/>w,<sp/>uint16_t<sp/>h,<sp/>uint16_t<sp/>color);</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>my_render_cmplt_cb();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>my_input_read_cb<sp/>(<ref refid="struct__lui__touch__input__data__s" kindref="compound">lui_touch_input_data_t</ref><sp/>*input);</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>button_1_cb(<ref refid="struct__lui__obj__s" kindref="compound">lui_obj_t</ref>*<sp/>button_obj);</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//-----------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main<sp/>()</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>[Mandatory]<sp/>At<sp/>the<sp/>starting,<sp/>initialize<sp/>LameUI<sp/>with<sp/>some<sp/>working<sp/>memory.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>memory<sp/>is<sp/>used<sp/>to<sp/>create<sp/>objects</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__lui__core_1ga96ff45bfbaf38c57a613f1b4a4830893" kindref="member">lui_init</ref>(lameui_memory,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(lameui_memory));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//----------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//[Mandatory]<sp/>creating<sp/>display<sp/>driver<sp/>object</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct__lui__disp__drv__s" kindref="compound">lui_dispdrv_t</ref><sp/>*my_display_driver<sp/>=<sp/><ref refid="group__lui__dispdrv_1ga1d63878ad3c05200478a7f7b958faa19" kindref="member">lui_dispdrv_create</ref>();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__lui__dispdrv_1ga77ef8325d1acf4c014be20de214e80de" kindref="member">lui_dispdrv_register</ref>(my_display_driver);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__lui__dispdrv_1ga3516bb99ba95160e9673ba8541ffb13e" kindref="member">lui_dispdrv_set_resolution</ref>(my_display_driver,<sp/>HOR_RES,<sp/>VERT_RES);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__lui__dispdrv_1ga982617c7a5f3d018a3bab0e01eebf8e3" kindref="member">lui_dispdrv_set_draw_pixels_area_cb</ref>(my_display_driver,<sp/>my_draw_pixels_cb);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Setting<sp/>render<sp/>complete<sp/>callback<sp/>is<sp/>optional.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Only<sp/>needed<sp/>if<sp/>user<sp/>is<sp/>buffering<sp/>the<sp/>draw<sp/>calls.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#ifdef<sp/>USE_BUFERING</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__lui__dispdrv_1gaa2cf5623fa26babf738af3a2ef0a5fc4" kindref="member">lui_dispdrv_set_render_complete_cb</ref>(my_display_driver,<sp/>my_render_cmplt_cb);</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//[Optional]<sp/>creating<sp/>input<sp/>device<sp/>object</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct__lui__touch__input__dev__s" kindref="compound">lui_touch_input_dev_t</ref><sp/>*my_input_device<sp/>=<sp/><ref refid="group__lui__input_1ga8a1f1c1a9f6d45e11ac7176cdf4873fd" kindref="member">lui_touch_inputdev_create</ref>();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__lui__input_1ga3861ea1c2fa9e1776f1aff61dc52daa9" kindref="member">lui_touch_inputdev_register</ref>(my_input_device);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__lui__input_1ga72d86e81f1d818b174b5a97b1297d840" kindref="member">lui_touch_inputdev_set_read_input_cb</ref>(my_input_device,<sp/>my_input_read_cb);<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//----------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//[Mandatory]<sp/>create<sp/>and<sp/>add<sp/>a<sp/>scene</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>There<sp/>must<sp/>be<sp/>at<sp/>least<sp/>one<sp/>scene.<sp/>It<sp/>is<sp/>at<sp/>the<sp/>top<sp/>of<sp/>the<sp/>hierarchy.<sp/>All<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>other<sp/>objects<sp/>will<sp/>be<sp/>under<sp/>the<sp/>hierarchy<sp/>of<sp/>a<sp/>scene.<sp/>There<sp/>can<sp/>be<sp/>multiple<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>scenes.<sp/>A<sp/>particular<sp/>object<sp/>can<sp/>be<sp/>under<sp/>only<sp/>one<sp/>scene<sp/>at<sp/>a<sp/>time.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct__lui__obj__s" kindref="compound">lui_obj_t</ref>*<sp/>scene_1<sp/>=<sp/><ref refid="group__lui__scene_1ga4f6f694807ee038a13942060efb715f0" kindref="member">lui_scene_create</ref>();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>[Mandatory]<sp/>A<sp/>scene<sp/>must<sp/>be<sp/>set<sp/>as<sp/>active<sp/>scene.<sp/>Only<sp/>the<sp/>active<sp/>scene</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>is<sp/>rendered.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__lui__scene_1ga5a2c32f660fbbe39fae9d5f11055aff7" kindref="member">lui_scene_set_active</ref>(scene_1);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>a<sp/>label</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct__lui__obj__s" kindref="compound">lui_obj_t</ref>*<sp/>label_1<sp/>=<sp/><ref refid="group__lui__label_1ga83cc1ae5b6c0601af8614574e019e8f8" kindref="member">lui_label_create</ref>();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>[Mandatory]<sp/>An<sp/>object<sp/>must<sp/>have<sp/>a<sp/>parent<sp/>which<sp/>is<sp/>either<sp/>a<sp/>`scene`<sp/>or<sp/>a<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>descendent<sp/>of<sp/>`scene`.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__lui__object_1ga0d71d83d0757cfbafd9308689e41aaf2" kindref="member">lui_object_add_to_parent</ref>(label_1,<sp/>scene_1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__lui__object_1gaf7bedc873edb862f9c1f8b063f17f839" kindref="member">lui_object_set_position</ref>(label_1,<sp/>5,<sp/>50);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__lui__label_1ga45528354a67fe65f23435338f970ba33" kindref="member">lui_label_set_text</ref>(label_1,<sp/></highlight><highlight class="stringliteral">&quot;This<sp/>is<sp/>Label<sp/>1.<sp/>Below<sp/>is<sp/>Button<sp/>1&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>a<sp/>button</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct__lui__obj__s" kindref="compound">lui_obj_t</ref>*<sp/>button_1<sp/>=<sp/><ref refid="group__lui__button_1gae3764b62e449b19e779892553ef6ed67" kindref="member">lui_button_create</ref>();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>[Mandatory]<sp/>Add<sp/>a<sp/>parent</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__lui__object_1ga0d71d83d0757cfbafd9308689e41aaf2" kindref="member">lui_object_add_to_parent</ref>(button_1,<sp/>scene_1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__lui__object_1gaed4bb7d9c2764c6786708535fad7cf67" kindref="member">lui_object_set_area</ref>(button_1,<sp/>110,<sp/>40);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__lui__object_1gaf7bedc873edb862f9c1f8b063f17f839" kindref="member">lui_object_set_position</ref>(button_1,<sp/>65,<sp/>100);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__lui__button_1gaec9c0f394998052cbc800530f69f3a97" kindref="member">lui_button_set_label_text</ref>(button_1,<sp/></highlight><highlight class="stringliteral">&quot;Button<sp/>1&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__lui__object_1gae9d2e2e1998f2603a3a6d24d08b5b64e" kindref="member">lui_object_set_callback</ref>(button_1,<sp/>button_1_cb);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(1)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>LameUI<sp/>has<sp/>no<sp/>built-in<sp/>timer.<sp/>So,<sp/>update<sp/>LameUI<sp/>periodically.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>lui_update()<sp/>function<sp/>reads<sp/>inputs,<sp/>checks<sp/>if<sp/>anything<sp/>needs<sp/>to<sp/>be<sp/>drawn,<sp/>and<sp/>fires<sp/>callbacks<sp/>if<sp/>and<sp/>when<sp/>needed.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__lui__core_1gaa4a3c7694929ad0b6c5cd565dd6e7304" kindref="member">lui_update</ref>();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sleep_ms(30);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//-----------<sp/>callback<sp/>function<sp/>definitions<sp/>------------</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>my_draw_pixels_cb<sp/>(uint16_t<sp/>x,<sp/>uint16_t<sp/>y,<sp/>uint16_t<sp/>width,<sp/>uint16_t<sp/>height,<sp/>uint16_t<sp/>color)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Assuming<sp/>user<sp/>has<sp/>at<sp/>least<sp/>one<sp/>of<sp/>these<sp/>functions:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>1.<sp/>display_put_pixel(x,<sp/>y,<sp/>color);<sp/><sp/><sp/><sp/>//<sp/>Draw<sp/>a<sp/>single<sp/>pixel</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>2.<sp/>display_put_pixels(x1,<sp/>y1,<sp/>x2,<sp/>y2,<sp/>color)<sp/><sp/><sp/><sp/>//<sp/>Fill<sp/>an<sp/>area<sp/>with<sp/>same<sp/>color</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>3.<sp/>display_fill(color_buffer,<sp/>x1,<sp/>y1,<sp/>x2,<sp/>y2);<sp/><sp/><sp/><sp/>//<sp/>Fill<sp/>an<sp/>area<sp/>with<sp/>diffrent<sp/>colors<sp/>from<sp/>a<sp/>buffer</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#ifdef<sp/>USE_BUFERING</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>When<sp/>using<sp/>buffering,<sp/>we&apos;ll<sp/>put<sp/>pixels<sp/>inside<sp/>a<sp/>full-screen<sp/>buffer.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Fill<sp/>the<sp/>display<sp/>with<sp/>buffer<sp/>when<sp/>either<sp/>the<sp/>buffer<sp/>is<sp/>full,<sp/>or<sp/>when</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>`render_complete`<sp/>callback<sp/>is<sp/>fired<sp/>by<sp/>LameUI.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint16_t<sp/>temp_x<sp/>=<sp/>0;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint16_t<sp/>temp_y<sp/>=<sp/>0;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Prepare<sp/>the<sp/>display<sp/>buffer</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>After<sp/>the<sp/>loop<sp/>ends,<sp/>the<sp/>prepared<sp/>buffer<sp/>is<sp/>flushed</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(temp_y<sp/>=<sp/>y;<sp/>temp_y<sp/>&lt;=<sp/>y<sp/>+<sp/>height<sp/>-<sp/>1;<sp/>temp_y++)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(temp_x<sp/>=<sp/>x;<sp/>temp_x<sp/>&lt;=<sp/>x<sp/>+<sp/>width<sp/>-<sp/>1;<sp/>temp_x++)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>display_buffer[HOR_RES<sp/>*<sp/>y<sp/>+<sp/>x]<sp/>=<sp/>color;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>increase<sp/>the<sp/>buffer<sp/>counter</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>display_buff_counter++;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>size<sp/>reached<sp/>max<sp/>buffer<sp/>size,<sp/>flush<sp/>it<sp/>now</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(display_buff_counter<sp/>&gt;=<sp/>DISPLAY_BUFF_SIZE)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>display_fill(display_buffer,<sp/>0,<sp/>0,<sp/>HOR_RES,<sp/>VERT_RES)<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Filling<sp/>an<sp/>area<sp/>with<sp/>multiple<sp/>colors<sp/>from<sp/>a<sp/>buffer</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>display_buff_counter<sp/>=<sp/>0;<sp/></highlight><highlight class="comment">//reset<sp/>the<sp/>counter</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#else</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>When<sp/>not<sp/>using<sp/>buffering,<sp/>directly<sp/>draw<sp/>those<sp/>pixels.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>There<sp/>are<sp/>2<sp/>ways.<sp/>Uncomment<sp/>the<sp/>method<sp/>user<sp/>wants<sp/>to<sp/>use.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//------------------<sp/>[<sp/>Method<sp/>1]<sp/>-----------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Draw<sp/>pixels<sp/>one<sp/>by<sp/>1.<sp/>This<sp/>is<sp/>the<sp/>easiest<sp/>way<sp/>to<sp/>implement,<sp/>but<sp/>also<sp/>slow.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>for<sp/>(uint16_t<sp/>h<sp/>=<sp/>0;<sp/>h<sp/>&lt;<sp/>hright;<sp/>h++)</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>for<sp/>(uint16_t<sp/>w<sp/>=<sp/>0;<sp/>w<sp/>&lt;<sp/>width;<sp/>w++)</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>display_put_pixel(x,<sp/>y,<sp/>color);<sp/><sp/><sp/><sp/>//<sp/>Filling<sp/>a<sp/>single<sp/>pixel<sp/>with<sp/>a<sp/>color</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//------------------<sp/>[<sp/>Method<sp/>2]<sp/>-----------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Another<sp/>even<sp/>better<sp/>way<sp/>is<sp/>to<sp/>draw<sp/>an<sp/>area<sp/>with<sp/>same<sp/>color,<sp/>since<sp/>most<sp/>displays<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>used<sp/>in<sp/>embedded<sp/>systems<sp/>support<sp/>setting<sp/>drawing<sp/>area<sp/>and<sp/>then<sp/>pass<sp/>a<sp/>color<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>to<sp/>fill<sp/>that<sp/>area.<sp/>This<sp/>saves<sp/>rendering<sp/>time.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>display_put_pixels(x,<sp/>y,<sp/>x<sp/>+<sp/>width<sp/>-<sp/>1,<sp/>y<sp/>+<sp/>height<sp/>-<sp/>1,<sp/>color);<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Filling<sp/>an<sp/>area<sp/>with<sp/>same<sp/>color</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>USE_BUFERING</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>my_render_cmplt_cb()</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>display_fill(display_buffer,<sp/>0,<sp/>0,<sp/>HOR_RES,<sp/>VERT_RES)<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>display_fill(buffer,<sp/>x1,<sp/>y1,<sp/>x2,<sp/>y2)</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>display_buff_counter<sp/>=<sp/>0;<sp/></highlight><highlight class="comment">//reset<sp/>the<sp/>counter</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>my_input_read_cb<sp/>(<ref refid="struct__lui__touch__input__data__s" kindref="compound">lui_touch_input_data_t</ref><sp/>*input)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Assuming<sp/>that<sp/>user<sp/>has<sp/>a<sp/>function<sp/>display_get_touch()<sp/>that<sp/>returns<sp/>a<sp/>`touch_data_t`<sp/>variable.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Also<sp/>assuming<sp/>that<sp/>members<sp/>of<sp/>`touch_data_t`<sp/>are:<sp/>pressed(uint8_t),<sp/>x(uint16_t),<sp/>y(uint16_t).</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>touch_data_t<sp/>touch<sp/>=<sp/>display_get_touch();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>input-&gt;<ref refid="struct__lui__touch__input__data__s_1afb1054eabf8033209df3b6bc2ca5a2af" kindref="member">is_pressed</ref><sp/>=<sp/>touch.pressed;<sp/><sp/></highlight><highlight class="comment">//<sp/>`touch.pressed`<sp/>should<sp/>be<sp/>1<sp/>if<sp/>touched,<sp/>0<sp/>if<sp/>not<sp/>touched</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(input-&gt;<ref refid="struct__lui__touch__input__data__s_1afb1054eabf8033209df3b6bc2ca5a2af" kindref="member">is_pressed</ref><sp/>==<sp/>1)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>input-&gt;<ref refid="struct__lui__touch__input__data__s_1a0dda12587fe70222aa328760a1ab2055" kindref="member">y</ref><sp/>=<sp/>touch.y;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>input-&gt;<ref refid="struct__lui__touch__input__data__s_1a7f21ada3a9a2b790c51c2f767ea3e30e" kindref="member">x</ref><sp/>=<sp/>touch.x;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>IMPORTANT:<sp/>User<sp/>MUST<sp/>set<sp/>x<sp/>and<sp/>y<sp/>as<sp/>-1<sp/>when<sp/>display<sp/>is<sp/>NOT<sp/>touched.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>input-&gt;<ref refid="struct__lui__touch__input__data__s_1a0dda12587fe70222aa328760a1ab2055" kindref="member">y</ref><sp/>=<sp/>-1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>input-&gt;<ref refid="struct__lui__touch__input__data__s_1a7f21ada3a9a2b790c51c2f767ea3e30e" kindref="member">x</ref><sp/>=<sp/>-1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>button_1_cb(<ref refid="struct__lui__obj__s" kindref="compound">lui_obj_t</ref>*<sp/>button_obj)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Get<sp/>the<sp/>event<sp/>of<sp/>callback</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>int8_t<sp/></highlight><highlight class="keyword">event</highlight><highlight class="normal"><sp/>=<sp/><ref refid="group__lui__object_1ga580b2bdece45808266791573d874aabb" kindref="member">lui_object_get_event</ref>(button_obj);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(event<sp/>==<sp/>-1)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(event<sp/>==<sp/><ref refid="group__LUI__EVENT_1gac1d4660029fe5efac27e0116e258d65d" kindref="member">LUI_EVENT_PRESSED</ref>)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Button<sp/>is<sp/>pressed.<sp/>Do<sp/>something</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;Button<sp/>1<sp/>is<sp/>pressed&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(event<sp/>==<sp/><ref refid="group__LUI__EVENT_1ga7bb839ee9510a334e4ebc1af25613d25" kindref="member">LUI_EVENT_RELEASED</ref>)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Button<sp/>is<sp/>released.<sp/>Do<sp/>something</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;Button<sp/>1<sp/>is<sp/>released&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
</sect1>
    </detaileddescription>
  </compounddef>
</doxygen>
