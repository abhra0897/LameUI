<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="group__lui__dispdrv" kind="group">
    <compoundname>lui_dispdrv</compoundname>
    <title>Display Driver API</title>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__lui__dispdrv_1ga1d63878ad3c05200478a7f7b958faa19" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct__lui__disp__drv__s" kindref="compound">lui_dispdrv_t</ref> *</type>
        <definition>lui_dispdrv_t* lui_dispdrv_create</definition>
        <argsstring>()</argsstring>
        <name>lui_dispdrv_create</name>
        <briefdescription>
<para>Create display driver object. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>lui_dispdrv_t* created display driver </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lame_ui.h" line="2282" column="15" bodyfile="lame_ui.c" bodystart="3966" bodyend="3978" declfile="lame_ui.h" declline="2282" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="group__lui__dispdrv_1ga77ef8325d1acf4c014be20de214e80de" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void lui_dispdrv_register</definition>
        <argsstring>(lui_dispdrv_t *dispdrv)</argsstring>
        <name>lui_dispdrv_register</name>
        <param>
          <type><ref refid="struct__lui__disp__drv__s" kindref="compound">lui_dispdrv_t</ref> *</type>
          <declname>dispdrv</declname>
        </param>
        <briefdescription>
<para>Register display driver. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dispdrv</parametername>
</parameternamelist>
<parameterdescription>
<para>display driver object </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lame_ui.h" line="2289" column="6" bodyfile="lame_ui.c" bodystart="3980" bodyend="3985" declfile="lame_ui.h" declline="2289" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__lui__dispdrv_1ga3516bb99ba95160e9673ba8541ffb13e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void lui_dispdrv_set_resolution</definition>
        <argsstring>(lui_dispdrv_t *dispdrv, uint16_t hor_res, uint16_t vert_res)</argsstring>
        <name>lui_dispdrv_set_resolution</name>
        <param>
          <type><ref refid="struct__lui__disp__drv__s" kindref="compound">lui_dispdrv_t</ref> *</type>
          <declname>dispdrv</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>hor_res</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>vert_res</declname>
        </param>
        <briefdescription>
<para>Set horizontal and vertical resolution of display. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dispdrv</parametername>
</parameternamelist>
<parameterdescription>
<para>display driver object </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>hor_res</parametername>
</parameternamelist>
<parameterdescription>
<para>horizontal resolution </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>vert_res</parametername>
</parameternamelist>
<parameterdescription>
<para>vertical resolution </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lame_ui.h" line="2298" column="6" bodyfile="lame_ui.c" bodystart="3987" bodyend="3993" declfile="lame_ui.h" declline="2298" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__lui__dispdrv_1ga982617c7a5f3d018a3bab0e01eebf8e3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void lui_dispdrv_set_draw_pixels_area_cb</definition>
        <argsstring>(lui_dispdrv_t *dispdrv, void(*draw_pixels_area_cb)(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color))</argsstring>
        <name>lui_dispdrv_set_draw_pixels_area_cb</name>
        <param>
          <type><ref refid="struct__lui__disp__drv__s" kindref="compound">lui_dispdrv_t</ref> *</type>
          <declname>dispdrv</declname>
        </param>
        <param>
          <type>void(*)(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color)</type>
          <declname>draw_pixels_area_cb</declname>
        </param>
        <briefdescription>
<para>Set callback function for drawing an area of pixels with a color. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dispdrv</parametername>
</parameternamelist>
<parameterdescription>
<para>display driver object </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>draw_pixels_area_cb</parametername>
</parameternamelist>
<parameterdescription>
<para>callback function pointer </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lame_ui.h" line="2306" column="6" bodyfile="lame_ui.c" bodystart="3995" bodyend="4000" declfile="lame_ui.h" declline="2306" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__lui__dispdrv_1gaa2cf5623fa26babf738af3a2ef0a5fc4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void lui_dispdrv_set_render_complete_cb</definition>
        <argsstring>(lui_dispdrv_t *dispdrv, void(*render_complete_cb)())</argsstring>
        <name>lui_dispdrv_set_render_complete_cb</name>
        <param>
          <type><ref refid="struct__lui__disp__drv__s" kindref="compound">lui_dispdrv_t</ref> *</type>
          <declname>dispdrv</declname>
        </param>
        <param>
          <type>void(*)()</type>
          <declname>render_complete_cb</declname>
        </param>
        <briefdescription>
<para>Set callback function for handling render complete signal. This is optional. </para>
        </briefdescription>
        <detaileddescription>
<para>When rendering is completed, LameUI calls this function. It is useful if user was buffering the draw calls rather than directly drawing the pixels on display. Inside the callback functio, user must flush the buffer to display. If user was NOT buffering, then no need to use this callback.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dispdrv</parametername>
</parameternamelist>
<parameterdescription>
<para>display driver object </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>render_complete_cb</parametername>
</parameternamelist>
<parameterdescription>
<para>callback function pointer </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lame_ui.h" line="2319" column="6" bodyfile="lame_ui.c" bodystart="4002" bodyend="4007" declfile="lame_ui.h" declline="2319" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__lui__dispdrv_1ga7d451e8c6afd8351943302f22a22ab5e" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t _lui_disp_drv_check</definition>
        <argsstring>()</argsstring>
        <name>_lui_disp_drv_check</name>
        <briefdescription>
<para>Check if display driver and pixel drawing callback function are properly registered. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>uint8_t 0: Not registered, 1: Registered </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lame_ui.h" line="2327" column="9" bodyfile="lame_ui.c" bodystart="4513" bodyend="4523" declfile="lame_ui.h" declline="2327" declcolumn="9"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>API for <bold><computeroutput>display driver</computeroutput></bold> object. </para>
    </briefdescription>
    <detaileddescription>
<para>LameUI does NOT have its own display driver. User must supply their own functions to draw pixels on a display. The displaydriver object is a virtual driver that actually calls user supplied callback functions.</para>
<para>The example below is using TFT_eSPI library on Arduino framework Hardware: [MCU = ESP32, Display: ILI9341, Touch IC = XPT2046]</para>
<sect2 id="group__lui__dispdrv_1displaydriver_touchinput_example">
<title>Example</title>
<para><programlisting><codeline><highlight class="normal">//<sp/>This<sp/>example<sp/>uses<sp/>TFT_eSPI<sp/>library<sp/>on<sp/>Arduino<sp/>framework</highlight></codeline>
<codeline><highlight class="normal">//<sp/>Hardware:<sp/>[MCU<sp/>=<sp/>ESP32,<sp/>Display:<sp/>ILI9341,<sp/>Touch<sp/>IC<sp/>=<sp/>XPT2046]</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">#include<sp/>&lt;TFT_eSPI.h&gt;<sp/>//<sp/>Graphics<sp/>and<sp/>font<sp/>library<sp/>for<sp/>ILI9341<sp/>driver<sp/>chip</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&lt;SPI.h&gt;</highlight></codeline>
<codeline><highlight class="normal">//<sp/>...<sp/>[<sp/>Include<sp/>LameUI<sp/>library<sp/>and<sp/>other<sp/>required<sp/>headers<sp/>too]<sp/>...</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">TFT_eSPI<sp/>tft<sp/>=<sp/>TFT_eSPI();<sp/><sp/>//<sp/>Invoke<sp/>library</highlight></codeline>
<codeline><highlight class="normal">uint8_t<sp/>lui_memory[4000];</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>draw_pixels_area_cb(uint16_t<sp/>x,<sp/>uint16_t<sp/>y,<sp/>uint16_t<sp/>w,<sp/>uint16_t<sp/>h,<sp/>uint16_t<sp/>color)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>tft.fillRect(x,<sp/>y,<sp/>w,<sp/>h,<sp/>color);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">void<sp/>read_touch_input_cb(lui_touch_input_data_t*<sp/>inputdata)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>uint16_t<sp/>x<sp/>=<sp/>0,<sp/>y<sp/>=<sp/>0;<sp/>//<sp/>To<sp/>store<sp/>the<sp/>touch<sp/>coordinates</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Pressed<sp/>will<sp/>be<sp/>set<sp/>true<sp/>is<sp/>there<sp/>is<sp/>a<sp/>valid<sp/>touch<sp/>on<sp/>the<sp/>screen</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>bool<sp/>pressed<sp/>=<sp/>tft.getTouch(&amp;x,<sp/>&amp;y);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>inputdata-&gt;is_pressed<sp/>=<sp/>pressed;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(pressed)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>inputdata-&gt;x<sp/>=<sp/>x;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>inputdata-&gt;y<sp/>=<sp/>y;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>else</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>inputdata-&gt;x<sp/>=<sp/>-1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>inputdata-&gt;y<sp/>=<sp/>-1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>setup(void)<sp/></highlight></codeline>
<codeline><highlight class="normal">{<sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Initilaize<sp/>tft</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>tft.init();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>tft.setTouch(touch_cal_data);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Initialize<sp/>LameUI<sp/>with<sp/>some<sp/>memory</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>lui_init(lui_memory,<sp/>sizeof(lui_memory));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Create<sp/>a<sp/>display<sp/>driver<sp/>object</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>lui_dispdrv_t*<sp/>display_driver<sp/>=<sp/>lui_dispdrv_create();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>lui_dispdrv_register(display_driver);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>lui_dispdrv_set_resolution(display_driver,<sp/>240,<sp/>320);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>lui_dispdrv_set_draw_pixels_area_cb(display_driver,<sp/>draw_pixels_area_cb);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>lui_dispdrv_set_render_complete_cb(display_driver,<sp/>NULL);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Create<sp/>touch<sp/>input<sp/>device</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>lui_touch_input_dev_t*<sp/>input_device<sp/>=<sp/>lui_touch_inputdev_create();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>lui_touch_inputdev_register(input_device);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>lui_touch_inputdev_set_read_input_cb(input_device,<sp/>read_touch_input_cb);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>...<sp/>[Add<sp/>scene<sp/>(mandatory)<sp/>and<sp/>other<sp/>widgets]<sp/>...</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>loop()</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Must<sp/>update<sp/>the<sp/>UI<sp/>periodically</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>lui_update();</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>...<sp/>[Do<sp/>other<sp/>stuffs]<sp/>...</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
</sect2>
    </detaileddescription>
  </compounddef>
</doxygen>
