<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="group__lui__keyboard" kind="group">
    <compoundname>lui_keyboard</compoundname>
    <title>Keyboard API</title>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__lui__keyboard_1gac8d85d9c6032bad7ec26ea9b6c7f8a23" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="lame__ui_8h_1a5a7ccb45f639e22e43b3ac176a75dd09" kindref="member">lui_obj_t</ref> *</type>
        <definition>lui_obj_t* lui_keyboard_create</definition>
        <argsstring>()</argsstring>
        <name>lui_keyboard_create</name>
        <briefdescription>
<para>Create a keyboard object with initial values. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>lui_obj_t* Created keyboard (buttongrid) object </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lame_ui.h" line="2015" column="11" bodyfile="lame_ui.c" bodystart="2511" bodyend="2540" declfile="lame_ui.h" declline="2015" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__lui__keyboard_1gad92ac2dadb7ce0442f31bafc5c046eb2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char* lui_keyboard_get_key_text</definition>
        <argsstring>(lui_obj_t *obj, uint8_t btn_index)</argsstring>
        <name>lui_keyboard_get_key_text</name>
        <param>
          <type><ref refid="lame__ui_8h_1a5a7ccb45f639e22e43b3ac176a75dd09" kindref="member">lui_obj_t</ref> *</type>
          <declname>obj</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>btn_index</declname>
        </param>
        <briefdescription>
<para>Get the text of a key against its index. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>obj</parametername>
</parameternamelist>
<parameterdescription>
<para>keyboard (buttongrid) object </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>btn_index</parametername>
</parameternamelist>
<parameterdescription>
<para>index of the key/button </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>const char* text of the key </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lame_ui.h" line="2024" column="12" bodyfile="lame_ui.c" bodystart="2666" bodyend="2669" declfile="lame_ui.h" declline="2024" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="group__lui__keyboard_1gafc32e9c221115c14e93d5cdaedce4c65" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void lui_keyboard_set_mode</definition>
        <argsstring>(lui_obj_t *obj, uint8_t mode)</argsstring>
        <name>lui_keyboard_set_mode</name>
        <param>
          <type><ref refid="lame__ui_8h_1a5a7ccb45f639e22e43b3ac176a75dd09" kindref="member">lui_obj_t</ref> *</type>
          <declname>obj</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>mode</declname>
        </param>
        <briefdescription>
<para>Set the operation mode of keyboard. </para>
        </briefdescription>
        <detaileddescription>
<para>For allowed modes, see: <ref refid="group__LUI__KEYBOARD__MODE" kindref="compound">Keyboard modes</ref></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>obj</parametername>
</parameternamelist>
<parameterdescription>
<para>keyboard (buttongrid) object </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mode</parametername>
</parameternamelist>
<parameterdescription>
<para>mode </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lame_ui.h" line="2034" column="6" bodyfile="lame_ui.c" bodystart="2625" bodyend="2659" declfile="lame_ui.h" declline="2034" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__lui__keyboard_1ga05ffd2d8153473cb7114b0ce6e032a6b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void lui_keyboard_set_font</definition>
        <argsstring>(lui_obj_t *obj, const lui_font_t *font)</argsstring>
        <name>lui_keyboard_set_font</name>
        <param>
          <type><ref refid="lame__ui_8h_1a5a7ccb45f639e22e43b3ac176a75dd09" kindref="member">lui_obj_t</ref> *</type>
          <declname>obj</declname>
        </param>
        <param>
          <type>const <ref refid="structlui__font__t" kindref="compound">lui_font_t</ref> *</type>
          <declname>font</declname>
        </param>
        <briefdescription>
<para>Set font of the keyboard. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>obj</parametername>
</parameternamelist>
<parameterdescription>
<para>keyboard (buttongrid) object </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>font</parametername>
</parameternamelist>
<parameterdescription>
<para>font </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lame_ui.h" line="2042" column="6" bodyfile="lame_ui.c" bodystart="2661" bodyend="2664" declfile="lame_ui.h" declline="2042" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__lui__keyboard_1ga8c3c17480bba2b6d06d8cc5bc25c02e3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void lui_keyboard_set_target_txtbox</definition>
        <argsstring>(lui_obj_t *obj_kb, lui_obj_t *obj_txtbox)</argsstring>
        <name>lui_keyboard_set_target_txtbox</name>
        <param>
          <type><ref refid="lame__ui_8h_1a5a7ccb45f639e22e43b3ac176a75dd09" kindref="member">lui_obj_t</ref> *</type>
          <declname>obj_kb</declname>
        </param>
        <param>
          <type><ref refid="lame__ui_8h_1a5a7ccb45f639e22e43b3ac176a75dd09" kindref="member">lui_obj_t</ref> *</type>
          <declname>obj_txtbox</declname>
        </param>
        <briefdescription>
<para>Set the target textbox of the keyboard. When target textbox is set, the keyboard becomes visible and only the target textbox receives input. To hide the keyboard again, tap/click on the &quot;check/ok&quot; button on the keyboard. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>obj_kb</parametername>
</parameternamelist>
<parameterdescription>
<para>keyboard (buttongrid) object </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>obj_txtbox</parametername>
</parameternamelist>
<parameterdescription>
<para>textbox object </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lame_ui.h" line="2052" column="6" bodyfile="lame_ui.c" bodystart="2671" bodyend="2713" declfile="lame_ui.h" declline="2052" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__lui__keyboard_1ga4c2a164a62d97b0866c405ba36723971" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void lui_keyboard_sys_cb</definition>
        <argsstring>(lui_obj_t *obj_sender)</argsstring>
        <name>lui_keyboard_sys_cb</name>
        <param>
          <type><ref refid="lame__ui_8h_1a5a7ccb45f639e22e43b3ac176a75dd09" kindref="member">lui_obj_t</ref> *</type>
          <declname>obj_sender</declname>
        </param>
        <briefdescription>
<para>Keyboard callback function. This function handles all key presses. </para>
        </briefdescription>
        <detaileddescription>
<para>If user needs to write their own callback for keyboard, they must call this function from their own callback function.</para>
<para><bold>Example:</bold> <programlisting><codeline><highlight class="normal">//<sp/>User<sp/>defined<sp/>custom<sp/>callback<sp/>function<sp/>for<sp/>keyboard</highlight></codeline>
<codeline><highlight class="normal">void<sp/>kb_user_callback(lui_obj_t*<sp/>sender)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Keyboard<sp/>key<sp/>is<sp/>pressed.<sp/>Do<sp/>something</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>..........</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>[Mandatory]<sp/>After<sp/>all<sp/>user<sp/>stuffs<sp/>are<sp/>done,<sp/>must<sp/>call<sp/>lui_keyboard_sys_cb()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>lui_keyboard_sys_cb(sender);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">lui_obj_t*<sp/>keyboard<sp/>=<sp/>lui_keyboard_create();</highlight></codeline>
<codeline><highlight class="normal">lui_object_set_callback(keyboard,<sp/>kb_user_callback);</highlight></codeline>
</programlisting></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>obj_sender</parametername>
</parameternamelist>
<parameterdescription>
<para>sender object </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lame_ui.h" line="2077" column="6" bodyfile="lame_ui.c" bodystart="2542" bodyend="2623" declfile="lame_ui.h" declline="2077" declcolumn="6"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>API for <bold><computeroutput>Keyboard</computeroutput></bold> widget. </para>
    </briefdescription>
    <detaileddescription>
<para><computeroutput>keyboard</computeroutput> is a special typw of <computeroutput>buttongrid</computeroutput>. Keyboard has 3 modes. See : <ref refid="group__LUI__KEYBOARD__MODE" kindref="compound">Keyboard modes</ref>.</para>
<para>Usually keyboard is used along with a <computeroutput>textbox</computeroutput>. See: <ref refid="group__lui__textbox" kindref="compound">Textbox API</ref></para>
<para>Steps to use a keyboard with a textbox are:<orderedlist>
<listitem><para>Create a keyboard object. Note: Keyboards are hidden by default.</para>
</listitem><listitem><para>Create a textbox object.</para>
</listitem><listitem><para>Create a callback function for the textbox 3.1. If event is LUI_EVENT_ENTERED, set the target keyboard for this textbox. This will make the keyboard visible. 3.2. If event is LUI_EVENT_EXITED, set target keyboard as NULL. This will hide the keyboard again.</para>
</listitem></orderedlist>
</para>
<sect2 id="group__lui__keyboard_1keyboard_example">
<title>Example</title>
<para>This example only creates a keyboard and links it with an existing textbox. To see a more complete example, see <computeroutput>textbox</computeroutput> example section. See: <ref refid="group__lui__textbox" kindref="compound">Textbox API</ref> <programlisting><codeline><highlight class="normal">lui_obj_t*<sp/>my_keyboard<sp/>=<sp/>lui_keyboard_create();</highlight></codeline>
<codeline><highlight class="normal">//<sp/>Keyboard<sp/>is<sp/>by<sp/>default<sp/>hidden.<sp/>It<sp/>is<sp/>supposed<sp/>to<sp/>be<sp/>made<sp/>visible<sp/>when<sp/>a</highlight></codeline>
<codeline><highlight class="normal">//<sp/>textbox<sp/>is<sp/>clicked<sp/>on.<sp/>But<sp/>for<sp/>this<sp/>example,<sp/>we<sp/>are<sp/>making<sp/>it<sp/>visible</highlight></codeline>
<codeline><highlight class="normal">//<sp/>manually.</highlight></codeline>
<codeline><highlight class="normal">lui_object_set_visibility(my_keyboard.<sp/>1);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Set<sp/>the<sp/>target<sp/>textbox</highlight></codeline>
<codeline><highlight class="normal">lui_keyboard_set_target_txtbox(my_keyboard.<sp/>my_txtbox);</highlight></codeline>
</programlisting> </para>
</sect2>
    </detaileddescription>
  </compounddef>
</doxygen>
